
# the original image is very large
# does the dockerized application still needs the full suite of Go tools,
# including the compiler, after the application binary had been compiled? 
# NO is the answer

# use multi-stage builds.
# main idea is that we use one image to produce some artefacts,
# which are then placed into another, much smaller image
# containing only the parts necessary for running the artefacts that we’d built.

##
## Build
##

FROM golang:1.16-buster AS build

WORKDIR /app

COPY go.mod .
# COPY go.sum .
RUN go mod download

COPY *.go .

RUN go build -o /go_cmd

##
## Deploy
##

FROM gcr.io/distroless/base-debian10

WORKDIR /

COPY --from=build /go_cmd o/go_cmd

#EXPOSE 8080

USER nonroot:nonroot

ENTRYPOINT ["/go_cmd run echo hello"]

# the new size is much smaller
# this is due to the fact that the “distroless” base image
# that we have used to deploy our Go application is very barebones and
# is meant for lean deployments of static binaries.